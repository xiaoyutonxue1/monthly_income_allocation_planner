import React, { useEffect, useState, useMemo } from 'react';
import { 
  AreaChart, 
  Area, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip as RechartsTooltip, 
  PieChart, 
  Pie, 
  Cell, 
  Legend, 
  ResponsiveContainer, 
  BarChart, 
  Bar, 
  ComposedChart 
} from 'recharts';
import { 
  BarChart3Icon, 
  CheckCircleIcon, 
  PlusIcon, 
  SettingsIcon, 
  PieChartIcon,
  LayoutDashboardIcon,
  CalendarIcon,
  ClockIcon,
  TrendingUpIcon,
  TrendingDownIcon,
  ArrowRightIcon,
  AlertTriangleIcon,
  ArrowDownIcon,
  ArrowUpIcon,
  LayoutIcon,
  AlertCircleIcon,
  Trash2Icon,
  WalletIcon,
  PiggyBankIcon,
  ChevronLeftIcon,
  ChevronRightIcon,
  LayoutTemplateIcon,
  ChevronUpIcon,
  CheckIcon,
  DownloadIcon,
  UploadIcon,
  TagIcon,
  FolderOpenIcon,
  XIcon,
  DollarSignIcon,
  ActivityIcon,
  BarChart2
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { format, addMonths, subMonths } from 'date-fns';
import { zhCN } from 'date-fns/locale';
import { cn } from '@/lib/utils';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { toast, ToastContainer } from '@/components/ui/use-toast';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useNavigate } from 'react-router-dom';

interface Allocation {
  id: string;
  purpose: string;
  amount: number;
  category?: string;
  note?: string;
  manualGroup?: string;
  group?: string; // 添加缺失的group属性
}

interface MonthData {
  income: number;
  allocations: Allocation[];
  activeTemplate?: string;
}

// 定义分类
const CATEGORIES = [
  { id: 'housing', name: '住房', color: '#4f46e5' },
  { id: 'food', name: '餐饮', color: '#16a34a' },
  { id: 'transport', name: '交通', color: '#facc15' },
  { id: 'entertainment', name: '娱乐', color: '#f97316' },
  { id: 'shopping', name: '购物', color: '#3b82f6' },
  { id: 'medical', name: '医疗', color: '#06b6d4' },
  { id: 'education', name: '教育', color: '#eab308' },
  { id: 'saving', name: '储蓄', color: '#6366f1' },
  { id: 'investment', name: '投资', color: '#14b8a6' },
  { id: 'other', name: '其他', color: '#64748b' },
];

const colorPalette = [
  '#3b82f6', // 蓝色
  '#22c55e', // 绿色
  '#f59e0b', // 黄色
  '#ef4444', // 红色
  '#8b5cf6', // 紫色
  '#ec4899', // 粉色
  '#06b6d4', // 青色
  '#14b8a6', // 蓝绿色
  '#f97316', // 橙色
  '#6366f1', // 靛蓝色
];

// 添加分类组数据结构
interface CategoryGroup {
  id: string;
  name: string;
  color: string;
  categories: string[]; // 包含的子分类ID
  recommendedPercentage: number; // 建议比例
  description: string; // 描述
}

// 定义每个模板对应的分类组
const TEMPLATE_GROUPS: Record<string, CategoryGroup[]> = {
  '六罐法则': [
    {
      id: 'necessities',
      name: '生活必需',
      color: '#16a34a',
      categories: ['housing', 'food', 'transport', 'medical'],
      recommendedPercentage: 55,
      description: '日常生活的必要开支，如住房、食品、基本交通和医疗'
    },
    {
      id: 'education',
      name: '教育投资',
      color: '#eab308',
      categories: ['education'],
      recommendedPercentage: 10,
      description: '用于自我提升和学习的支出，包括书籍、课程等'
    },
    {
      id: 'savings',
      name: '储蓄备用',
      color: '#3b82f6',
      categories: ['saving'],
      recommendedPercentage: 10,
      description: '应急基金，以应对突发情况'
    },
    {
      id: 'enjoyment',
      name: '享受生活',
      color: '#f97316',
      categories: ['entertainment'],
      recommendedPercentage: 10,
      description: '提升生活品质的支出，如旅行、爱好、娱乐等'
    },
    {
      id: 'investment',
      name: '长期投资',
      color: '#6366f1',
      categories: ['investment'],
      recommendedPercentage: 10,
      description: '用于长期财富增值的投资'
    },
    {
      id: 'generosity',
      name: '慷慨捐赠',
      color: '#ec4899',
      categories: ['other'],
      recommendedPercentage: 5,
      description: '回馈社会的慈善捐款'
    }
  ],
  
  '50/30/20法则': [
    {
      id: 'necessities',
      name: '必要开支',
      color: '#16a34a',
      categories: ['housing', 'food', 'transport', 'medical'],
      recommendedPercentage: 50,
      description: '生活必需品，包括房租/房贷、水电、食品、基本交通等'
    },
    {
      id: 'personal',
      name: '个人支出',
      color: '#f97316',
      categories: ['entertainment', 'education', 'other'],
      recommendedPercentage: 30,
      description: '提升生活品质的支出，包括娱乐、购物、餐厅等非必需品'
    },
    {
      id: 'financial',
      name: '储蓄投资',
      color: '#3b82f6',
      categories: ['saving', 'investment'],
      recommendedPercentage: 20,
      description: '为未来做准备，包括应急基金、债务偿还和投资'
    }
  ],
  
  '4321预算法': [
    {
      id: 'basicLiving',
      name: '基本生活',
      color: '#16a34a',
      categories: ['housing', 'food', 'transport', 'medical'],
      recommendedPercentage: 40,
      description: '基础生活必需品，包括住房、餐饮、基本服装等'
    },
    {
      id: 'discretionary',
      name: '自由支配',
      color: '#f97316',
      categories: ['entertainment', 'other'],
      recommendedPercentage: 30,
      description: '个人享受和提升生活品质的支出，如娱乐、旅行等'
    },
    {
      id: 'financialGoals',
      name: '财务目标',
      color: '#eab308',
      categories: ['saving', 'education'],
      recommendedPercentage: 20,
      description: '针对性储蓄，如购房首付、教育金等特定目标'
    },
    {
      id: 'investment',
      name: '储蓄投资',
      color: '#6366f1',
      categories: ['investment'],
      recommendedPercentage: 10,
      description: '长期理财增值，为退休或财务自由做准备'
    }
  ],
  
  '零基预算法': [],
  '70/20/10法则': [],
  '创业启动期': [
    {
      id: 'life_essential',
      name: '生活必需',
      color: '#16a34a', // 绿色
      categories: ['housing', 'food'],
      recommendedPercentage: 40,
      description: '维持基本生活所需的必要开支，如房租、食品等基本生活成本'
    },
    {
      id: 'startup_cost',
      name: '创业投入',
      color: '#0891b2', // 青蓝色
      categories: ['transport', 'housing'],
      recommendedPercentage: 30,
      description: '直接投入创业项目的资金，包括产品开发、设备购买等'
    },
    {
      id: 'skill_growth',
      name: '能力提升',
      color: '#9333ea', // 紫色
      categories: ['education'],
      recommendedPercentage: 15,
      description: '提升自身技能和知识的投资，如学习课程、专业书籍等'
    },
    {
      id: 'safety_net',
      name: '安全缓冲',
      color: '#f97316', // 橙色
      categories: ['saving'],
      recommendedPercentage: 10,
      description: '应对不确定性的现金储备，推荐维持至少3个月的生活费'
    },
    {
      id: 'enjoyment',
      name: '生活享受',
      color: '#ec4899', // 粉色
      categories: ['entertainment'],
      recommendedPercentage: 5,
      description: '保持生活平衡和心理健康的小额享受，避免创业疲劳'
    }
  ],
  '创业成长期': [
    {
      id: 'life_stability',
      name: '生活稳定',
      color: '#16a34a', // 绿色
      categories: ['housing', 'food'],
      recommendedPercentage: 30,
      description: '稳定的生活保障，随着收入增长可适当提高生活质量'
    },
    {
      id: 'business_growth',
      name: '业务扩展',
      color: '#0891b2', // 青蓝色
      categories: ['transport', 'housing'],
      recommendedPercentage: 35,
      description: '扩大业务规模的资金，包括市场营销、团队扩充等'
    },
    {
      id: 'networking',
      name: '人脉资源',
      color: '#9333ea', // 紫色
      categories: ['entertainment', 'education'],
      recommendedPercentage: 15,
      description: '行业交流、客户维护等关系建设的投入'
    },
    {
      id: 'financial_planning',
      name: '财务规划',
      color: '#f97316', // 橙色
      categories: ['saving', 'investment'],
      recommendedPercentage: 15,
      description: '长期资产配置和财富增值，为个人财务自由做准备'
    },
    {
      id: 'life_quality',
      name: '生活品质',
      color: '#ec4899', // 粉色
      categories: ['entertainment', 'other'],
      recommendedPercentage: 5,
      description: '提升生活品质，保持创业动力和工作生活平衡'
    }
  ],
  '精益创业': [
    {
      id: 'minimal_living',
      name: '极简生活',
      color: '#16a34a', // 绿色
      categories: ['housing', 'food'],
      recommendedPercentage: 35,
      description: '将生活成本控制在最低水平，延长资金燃烧周期'
    },
    {
      id: 'mvp_development',
      name: '最小验证',
      color: '#0891b2', // 青蓝色
      categories: ['housing', 'transport'],
      recommendedPercentage: 30,
      description: '开发最小可行产品(MVP)所需的最低投入'
    },
    {
      id: 'learning_testing',
      name: '学习测试',
      color: '#9333ea', // 紫色
      categories: ['education', 'entertainment'],
      recommendedPercentage: 20,
      description: '持续学习和市场验证的投入，收集用户反馈'
    },
    {
      id: 'runway_buffer',
      name: '生存缓冲',
      color: '#f97316', // 橙色
      categories: ['saving'],
      recommendedPercentage: 15,
      description: '确保基本生活的应急资金，至少6个月的基本开支'
    }
  ],
};

// 替换预设模板部分，添加更多科学的预算模板和详细介绍
interface TemplateInfo {
  title: string;
  description: string;
  suitableFor: string;
  allocations: (income: number) => Allocation[];
}

// 预设模板
const TEMPLATES: Record<string, TemplateInfo> = {
  '50/30/20法则': {
    title: '50/30/20法则',
    description: '由美国参议员Elizabeth Warren推广的经典预算法则，将收入分为三大类：必要开支、个人支出和储蓄/投资。简单易行，适合大多数人作为起点。',
    suitableFor: '适合初次预算、稳定收入人群、工薪阶层',
    allocations: (income: number) => [
      { id: crypto.randomUUID(), purpose: '必要支出', amount: income * 0.5, category: 'housing', note: '生活必需品，包括房租/房贷、水电、食品、基本交通和基础医疗等' },
      { id: crypto.randomUUID(), purpose: '个人支出', amount: income * 0.3, category: 'entertainment', note: '提升生活品质的支出，包括娱乐、购物、餐厅、旅行等非必需品' },
      { id: crypto.randomUUID(), purpose: '储蓄与投资', amount: income * 0.2, category: 'saving', note: '为未来做准备，包括应急基金、退休储蓄、债务偿还和投资增值' },
    ]
  },
  '零基预算法': {
    title: '零基预算法',
    description: '以"收入-支出=零"为原则的精细预算方法，要求为每一分钱安排归属。强调根据本月实际情况灵活规划，适合需要严格控制支出的人群。',
    suitableFor: '适合财务精细化管理、不稳定收入人群、需要还债人群',
    allocations: (income: number) => [
      { id: crypto.randomUUID(), purpose: '住房费用', amount: 0, category: 'housing', note: '房租/房贷、物业费、水电气网费等' },
      { id: crypto.randomUUID(), purpose: '日常餐饮', amount: 0, category: 'food', note: '日常三餐、食材购买等' },
      { id: crypto.randomUUID(), purpose: '交通出行', amount: 0, category: 'transport', note: '公共交通、油费、车辆维护等' },
      { id: crypto.randomUUID(), purpose: '医疗健康', amount: 0, category: 'medical', note: '医疗保险、门诊费用、药品等' },
      { id: crypto.randomUUID(), purpose: '个人消费', amount: 0, category: 'entertainment', note: '娱乐、爱好、外出就餐等' },
      { id: crypto.randomUUID(), purpose: '紧急备用', amount: 0, category: 'saving', note: '应急基金，建议3-6个月生活费' },
      { id: crypto.randomUUID(), purpose: '未来投资', amount: 0, category: 'investment', note: '退休金、股票、基金等投资' },
      { id: crypto.randomUUID(), purpose: '债务偿还', amount: 0, category: 'other', note: '信用卡、贷款等债务的还款' },
    ]
  },
  '4321预算法': {
    title: '4321预算法',
    description: '简单易记的收入分配策略，将收入按比例分为四大块：40%基本生活、30%自由支配、20%财务目标、10%储蓄投资。平衡了必要支出与个人所需。',
    suitableFor: '适合平衡稳健型人群、初次理财人士',
    allocations: (income: number) => [
      { id: crypto.randomUUID(), purpose: '基本生活(40%)', amount: income * 0.4, category: 'housing', note: '基础生活必需品，包括住房、餐饮、基本服装等' },
      { id: crypto.randomUUID(), purpose: '自由支配(30%)', amount: income * 0.3, category: 'entertainment', note: '个人享受和提升生活品质的支出，如娱乐、旅行等' },
      { id: crypto.randomUUID(), purpose: '财务目标(20%)', amount: income * 0.2, category: 'other', note: '针对性储蓄，如购房首付、教育金等特定目标' },
      { id: crypto.randomUUID(), purpose: '储蓄投资(10%)', amount: income * 0.1, category: 'investment', note: '长期理财增值，为退休或财务自由做准备' },
    ]
  },
  '70/20/10法则': {
    title: '70/20/10法则',
    description: '一种较为激进的理财方法，强调更大比例的当期生活支出和享受。70%用于生活开支，20%用于储蓄，10%用于投资或捐赠。',
    suitableFor: '适合高收入人群、年轻人、追求当下生活品质者',
    allocations: (income: number) => [
      { id: crypto.randomUUID(), purpose: '生活开支(70%)', amount: income * 0.7, category: 'housing', note: '所有日常生活开支，包括住房、食品、交通、娱乐等' },
      { id: crypto.randomUUID(), purpose: '储蓄目标(20%)', amount: income * 0.2, category: 'saving', note: '短期和中期储蓄，包括应急基金和阶段性目标' },
      { id: crypto.randomUUID(), purpose: '投资/捐赠(10%)', amount: income * 0.1, category: 'investment', note: '长期投资或回馈社会的捐赠支出' },
    ]
  },
  '六罐法则': {
    title: '六罐法则',
    description: '源自《小狗钱钱》的理财方法，将收入分为六个"罐子"，分别用于不同目的。注重长期财务安全和生活品质的平衡。',
    suitableFor: '适合家庭理财、长期稳健规划、有多元理财需求者',
    allocations: (income: number) => [
      { id: crypto.randomUUID(), purpose: '生活必需(55%)', amount: income * 0.55, category: 'housing', note: '日常生活的必要开支，如住房、食品、基本服装等' },
      { id: crypto.randomUUID(), purpose: '教育投资(10%)', amount: income * 0.1, category: 'education', note: '用于自我提升和学习的支出，包括书籍、课程等' },
      { id: crypto.randomUUID(), purpose: '储蓄备用(10%)', amount: income * 0.1, category: 'saving', note: '应急基金，以应对突发情况' },
      { id: crypto.randomUUID(), purpose: '享受生活(10%)', amount: income * 0.1, category: 'entertainment', note: '提升生活品质的支出，如旅行、娱乐等' },
      { id: crypto.randomUUID(), purpose: '长期投资(10%)', amount: income * 0.1, category: 'investment', note: '用于长期财富增值的投资' },
      { id: crypto.randomUUID(), purpose: '慷慨捐赠(5%)', amount: income * 0.05, category: 'other', note: '回馈社会的慈善捐款' },
    ]
  },
  '创业启动期': {
    title: '创业启动期预算',
    description: '适合刚开始创业的个人，平衡生活必需与创业投入，保持安全缓冲金',
    suitableFor: '副业创业者、独立创业者、刚离职创业的个人',
    allocations: (income: number) => [
      {
        id: crypto.randomUUID(),
        purpose: '房租水电',
        amount: income * 0.25,
        category: 'housing',
        manualGroup: 'life_essential'
      },
      {
        id: crypto.randomUUID(),
        purpose: '日常餐饮',
        amount: income * 0.15,
        category: 'food',
        manualGroup: 'life_essential'
      },
      {
        id: crypto.randomUUID(),
        purpose: '产品开发',
        amount: income * 0.20,
        category: 'housing',
        manualGroup: 'startup_cost'
      },
      {
        id: crypto.randomUUID(),
        purpose: '设备工具',
        amount: income * 0.10,
        category: 'transport',
        manualGroup: 'startup_cost'
      },
      {
        id: crypto.randomUUID(),
        purpose: '技能学习',
        amount: income * 0.15,
        category: 'education',
        manualGroup: 'skill_growth'
      },
      {
        id: crypto.randomUUID(),
        purpose: '应急储备',
        amount: income * 0.10,
        category: 'saving',
        manualGroup: 'safety_net'
      },
      {
        id: crypto.randomUUID(),
        purpose: '减压娱乐',
        amount: income * 0.05,
        category: 'entertainment',
        manualGroup: 'enjoyment'
      }
    ]
  },
  '创业成长期': {
    title: '创业成长期预算',
    description: '适合已有稳定收入的个人创业者，平衡业务增长与个人生活质量提升',
    suitableFor: '有稳定收入的个人创业者、自由职业者、小型工作室经营者',
    allocations: (income: number) => [
      {
        id: crypto.randomUUID(),
        purpose: '生活住房',
        amount: income * 0.20,
        category: 'housing',
        manualGroup: 'life_stability'
      },
      {
        id: crypto.randomUUID(),
        purpose: '饮食健康',
        amount: income * 0.10,
        category: 'food',
        manualGroup: 'life_stability'
      },
      {
        id: crypto.randomUUID(),
        purpose: '业务扩展',
        amount: income * 0.20,
        category: 'housing',
        manualGroup: 'business_growth'
      },
      {
        id: crypto.randomUUID(),
        purpose: '市场推广',
        amount: income * 0.15,
        category: 'transport',
        manualGroup: 'business_growth'
      },
      {
        id: crypto.randomUUID(),
        purpose: '行业社交',
        amount: income * 0.10,
        category: 'entertainment',
        manualGroup: 'networking'
      },
      {
        id: crypto.randomUUID(),
        purpose: '进修培训',
        amount: income * 0.05,
        category: 'education',
        manualGroup: 'networking'
      },
      {
        id: crypto.randomUUID(),
        purpose: '长期投资',
        amount: income * 0.08,
        category: 'investment',
        manualGroup: 'financial_planning'
      },
      {
        id: crypto.randomUUID(),
        purpose: '应急储备',
        amount: income * 0.07,
        category: 'saving',
        manualGroup: 'financial_planning'
      },
      {
        id: crypto.randomUUID(),
        purpose: '生活享受',
        amount: income * 0.05,
        category: 'entertainment',
        manualGroup: 'life_quality'
      }
    ]
  },
  '精益创业': {
    title: '精益创业模式',
    description: '基于精益创业理念，最小成本验证创业想法，延长资金跑道，适合资源有限者',
    suitableFor: '兼职创业者、bootstrapping创业者、验证创业想法阶段',
    allocations: (income: number) => [
      {
        id: crypto.randomUUID(),
        purpose: '基本住房',
        amount: income * 0.25,
        category: 'housing',
        manualGroup: 'minimal_living'
      },
      {
        id: crypto.randomUUID(),
        purpose: '简单饮食',
        amount: income * 0.10,
        category: 'food',
        manualGroup: 'minimal_living'
      },
      {
        id: crypto.randomUUID(),
        purpose: '原型开发',
        amount: income * 0.20,
        category: 'housing',
        manualGroup: 'mvp_development'
      },
      {
        id: crypto.randomUUID(),
        purpose: '测试设备',
        amount: income * 0.10,
        category: 'transport',
        manualGroup: 'mvp_development'
      },
      {
        id: crypto.randomUUID(),
        purpose: '专业学习',
        amount: income * 0.10,
        category: 'education',
        manualGroup: 'learning_testing'
      },
      {
        id: crypto.randomUUID(),
        purpose: '用户测试',
        amount: income * 0.10,
        category: 'entertainment',
        manualGroup: 'learning_testing'
      },
      {
        id: crypto.randomUUID(),
        purpose: '生存储备',
        amount: income * 0.15,
        category: 'saving',
        manualGroup: 'runway_buffer'
      }
    ]
  },
};

// 添加EmptyPlaceholder组件
interface EmptyPlaceholderProps {
  children: React.ReactNode;
}

const EmptyPlaceholder: React.FC<EmptyPlaceholderProps> = ({ children }) => {
  return (
    <div className="flex justify-center items-center p-8 text-center bg-gray-50 dark:bg-gray-800 rounded-lg border border-dashed border-gray-300 dark:border-gray-700">
      {children}
    </div>
  );
};

function App() {
  // 状态
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [monthlyData, setMonthlyData] = useState<Record<string, MonthData>>(() => {
    const saved = localStorage.getItem('monthlyData');
    return saved ? JSON.parse(saved) : {};
  });
  const [categories, setCategories] = useState<typeof CATEGORIES>(() => {
    const savedCategories = localStorage.getItem('userCategories');
    return savedCategories ? JSON.parse(savedCategories) : CATEGORIES;
  });
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newCategoryId, setNewCategoryId] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState('#3b82f6');
  const [isAddingCategory, setIsAddingCategory] = useState(false);
  const [activeTemplate, setActiveTemplate] = useState<string | null>(null);
  const [chartMode, setChartMode] = useState<'income' | 'balance' | 'combined'>('income');
  // 修改布局控制状态，增加'side'选项
  const [chartLayout, setChartLayout] = useState<'top' | 'bottom' | 'side'>('top');
  const [activeTab, setActiveTab] = useState<'budget' | 'reports' | 'categories' | 'templates' | 'settings'>('budget');
  const [selectedCategory, setSelectedCategory] = useState<string>('');

  const currentMonthKey = format(selectedDate, 'yyyy-MM');
  const currentMonthData = monthlyData[currentMonthKey] || { income: 0, allocations: [] };

  useEffect(() => {
    // 计算分类占比数据
    if (currentMonthData.allocations.length > 0) {
      // 计算分组支出
      calculateGroupExpenses();
    }
    
    // 同步template状态
    setActiveTemplate(currentMonthData.activeTemplate || null);
  }, [currentMonthData]);

  // 导航相关
  //const navigate = useNavigate();

  const updateMonthData = (data: MonthData) => {
    const newMonthlyData = {
      ...monthlyData,
      [currentMonthKey]: data,
    };
    setMonthlyData(newMonthlyData);
    localStorage.setItem('monthlyData', JSON.stringify(newMonthlyData));
  };

  // 修改收入输入框及相关处理函数
  const handleIncomeChange = (value: string) => {
    // 移除所有非数字字符，获取纯数字值
    const numericValue = value.replace(/[^\d]/g, '');
    
    // 更新月度数据
    updateMonthData({
      ...currentMonthData,
      income: numericValue ? Number(numericValue) : 0,
    });
  };

  // 格式化数字显示，添加千位分隔符
  const formatNumber = (num: number): string => {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  const addAllocation = () => {
    updateMonthData({
      ...currentMonthData,
      allocations: [
        ...currentMonthData.allocations,
        {
          id: crypto.randomUUID(),
          purpose: '',
          amount: 0,
        },
      ],
    });
  };

  const updateAllocation = (id: string, field: keyof Allocation, value: string | number) => {
    updateMonthData({
      ...currentMonthData,
      allocations: currentMonthData.allocations.map((allocation) =>
        allocation.id === id ? { ...allocation, [field]: value } : allocation
      ),
    });
  };

  const removeAllocation = (id: string) => {
    updateMonthData({
      ...currentMonthData,
      allocations: currentMonthData.allocations.filter((allocation) => allocation.id !== id),
    });
  };

  const handleMonthChange = (offset: number) => {
    const newDate = offset > 0 ? addMonths(selectedDate, offset) : subMonths(selectedDate, Math.abs(offset));
    setSelectedDate(newDate);
    
    // 获取新月份数据
    const newMonthKey = format(newDate, 'yyyy-MM');
    const newMonthData = monthlyData[newMonthKey] || { income: 0, allocations: [] };
    
    // 同步更新 activeTemplate 状态
    setActiveTemplate(newMonthData.activeTemplate || null);
  };

  const applyTemplate = (templateName: string) => {
    const template = TEMPLATES[templateName];
    if (template) {
      // 更新活动模板，同时保存到月份数据中
      setActiveTemplate(templateName);
      
      // 应用模板前添加过渡效果
      const container = document.querySelector('.allocations-table-container');
      if (container) {
        container.classList.add('apply-template-animation');
        setTimeout(() => {
          container.classList.remove('apply-template-animation');
        }, 1000);
      }
      
      updateMonthData({
        ...currentMonthData,
        allocations: template.allocations(currentMonthData.income),
        activeTemplate: templateName, // 保存到月份数据
      });
      
      // 显示应用成功的提示
      toast({
        title: `✅ 已应用"${template.title}"模板`,
        description: `${template.description.substring(0, 60)}...`,
        duration: 3000,
      });
    }
  };

  const totalAllocated = currentMonthData.allocations.reduce(
    (sum, allocation) => sum + allocation.amount,
    0
  );
  const balance = currentMonthData.income - totalAllocated;

  const totalBalance = Object.values(monthlyData).reduce(
    (sum, data) => sum + (data.income - data.allocations.reduce((a, b) => a + b.amount, 0)),
    0
  );

  // 为图表准备数据
  const monthlyBalanceData = Object.entries(monthlyData)
    .map(([month, data]) => {
      const monthBalance = data.income - data.allocations.reduce((sum, alloc) => sum + alloc.amount, 0);
      return {
        month: format(new Date(month + '-01'), 'yyyy年MM月'),
        balance: monthBalance,
      };
    })
    .sort((a, b) => a.month.localeCompare(b.month))
    .slice(-6); // 只显示最近6个月

  // 根据当前月份的分类统计支出
  const categoryData = useMemo(() => {
    if (!currentMonthData.allocations.length) return [];
    
    const data: { [key: string]: { name: string; value: number; color: string } } = {};
    
    currentMonthData.allocations.forEach(alloc => {
      if (alloc.category) {
        const category = categories.find(c => c.id === alloc.category);
        if (category) {
          if (data[category.id]) {
            data[category.id].value += alloc.amount;
          } else {
            data[category.id] = {
              name: category.name,
              value: alloc.amount,
              color: category.color
            };
          }
        }
      } else {
        // 如果没有分类，归入"未分类"
        if (data['uncategorized']) {
          data['uncategorized'].value += alloc.amount;
        } else {
          data['uncategorized'] = {
            name: '未分类',
            value: alloc.amount,
            color: '#94a3b8'
          };
        }
      }
    });
    
    // 将对象转换为数组
    return Object.values(data);
  }, [currentMonthData.allocations, categories]);

  // 保存分类到状态和本地存储
  const saveCategories = (newCategories: typeof CATEGORIES) => {
    setCategories(newCategories);
    localStorage.setItem('categories', JSON.stringify(newCategories));
  };

  const addCategory = () => {
    if (!newCategoryName.trim()) return;
    
    const newId = `custom_${Date.now()}`;
    const newCategory = {
      id: newId,
      name: newCategoryName.trim(),
      color: newCategoryColor
    };
    
    const updatedCategories = [...categories, newCategory];
    saveCategories(updatedCategories);
    setNewCategoryName('');
    setIsAddingCategory(false);
  };

  const removeCategory = (id: string) => {
    const updatedCategories = categories.filter(category => category.id !== id);
    saveCategories(updatedCategories);
  };

  useEffect(() => {
    const handleCategorySelection = (value: string, allocationId: string) => {
      if (value === 'manage_categories') {
        setIsAddingCategory(true);
        const allocation = currentMonthData.allocations.find(a => a.id === allocationId);
        if (allocation) {
          updateAllocation(allocationId, 'category', allocation.category || '');
        }
      }
    };
  }, []);

  // 计算各组支出比例和超支状态
  const calculateGroupExpenses = () => {
    if (!activeTemplate || !TEMPLATE_GROUPS[activeTemplate]) {
      return [];
    }
    
    const groups = TEMPLATE_GROUPS[activeTemplate];
    const result = groups.map(group => {
      // 计算该组中所有分配项的支出总和，优先考虑手动分配的组
      const totalExpense = currentMonthData.allocations
        .filter(alloc => 
          // 如果有手动分配的组，就使用它
          (alloc.manualGroup === group.id) || 
          // 否则使用自动分配的组（通过分类）
          (!alloc.manualGroup && group.categories.includes(alloc.category || ''))
        )
        .reduce((sum, alloc) => sum + alloc.amount, 0);
      
      // 计算占总收入的比例
      const percentage = currentMonthData.income > 0 
        ? (totalExpense / currentMonthData.income) * 100 
        : 0;
      
      // 判断是否超支
      const isExceeding = percentage > group.recommendedPercentage;
      
      return {
        ...group,
        totalExpense,
        actualPercentage: percentage,
        isExceeding
      };
    });
    
    return result;
  };

  // 获取计算结果
  const groupExpenses = calculateGroupExpenses();

  // 获取一个分配项所属的分类组
  const getAllocationGroup = (allocation: Allocation) => {
    // 如果存在手动分配的组ID，直接返回对应组
    if (allocation.manualGroup && activeTemplate && TEMPLATE_GROUPS[activeTemplate]) {
      const groups = TEMPLATE_GROUPS[activeTemplate];
      const manualGroup = groups.find(group => group.id === allocation.manualGroup);
      if (manualGroup) return manualGroup;
    }
    
    // 否则使用自动分配的组
    if (!activeTemplate || !TEMPLATE_GROUPS[activeTemplate]) {
      return null;
    }
    
    const groups = TEMPLATE_GROUPS[activeTemplate];
    return groups.find(group => group.categories.includes(allocation.category || '')) || null;
  };

  // 添加手动更新分组的方法
  const updateAllocationGroup = (id: string, groupId: string) => {
    const updatedAllocations = currentMonthData.allocations.map(allocation => {
      if (allocation.id === id) {
        return {
          ...allocation,
          manualGroup: groupId === "auto" ? undefined : groupId // 如果是 "auto" 则清除手动组
        };
      }
      return allocation;
    });
    
    updateMonthData({
      ...currentMonthData,
      allocations: updatedAllocations,
    });
  };

  // 添加calculateTotalAllocated函数
  const calculateTotalAllocated = () => {
    if (!currentMonthData || !currentMonthData.allocations) return 0;
    return currentMonthData.allocations.reduce((sum, item) => sum + (item.amount || 0), 0);
  };

  // 添加categoryData和groupData的计算逻辑
    if (!currentMonthData || !currentMonthData.allocations || currentMonthData.allocations.length === 0) {
      return [];
    }
    
    const categoryTotals = {};
    currentMonthData.allocations.forEach(alloc => {
      if (!categoryTotals[alloc.category]) {
        categoryTotals[alloc.category] = 0;
      }
      categoryTotals[alloc.category] += (alloc.amount || 0);
    });
    
    return Object.entries(categoryTotals).map(([name, value]) => ({
      name,
      value
    }));
  };

    if (!currentMonthData || !currentMonthData.allocations || currentMonthData.allocations.length === 0) {
      return [];
    }
    
    const groupTotals = {};
    currentMonthData.allocations.forEach(alloc => {
      const group = alloc.group || '未分组';
      if (!groupTotals[group]) {
        groupTotals[group] = 0;
      }
      groupTotals[group] += (alloc.amount || 0);
    });
    
    return Object.entries(groupTotals).map(([name, value]) => ({
      name,
      value
    }));
  };


  return (
    <div className="min-h-screen w-screen overflow-x-hidden bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-sky-50 via-indigo-50 to-emerald-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="w-full max-w-6xl mx-auto px-6 md:px-10 py-6 space-y-4"
      >
        <div className="flex flex-col md:flex-row justify-between items-start gap-4">
          <div className="flex-1">
            <motion.h1 
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              className="text-4xl font-bold mb-2 bg-gradient-to-r from-indigo-600 to-blue-500 bg-clip-text text-transparent"
            >
              月度收入规划
            </motion.h1>
            <p className="text-muted-foreground">规划和追踪您的月度收入分配</p>
          </div>
          
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => handleMonthChange(-1)}
              className="bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-900 dark:to-indigo-900 shadow-md hover:shadow-lg hover:scale-105 transition-all rounded-xl h-12 w-14 flex items-center justify-center border border-blue-200 dark:border-blue-800"
            >
              <ChevronLeftIcon className="h-7 w-7 text-blue-600 dark:text-blue-400" />
            </Button>
            
          <Popover>
            <PopoverTrigger asChild>
              <Button
                variant="outline"
                className={cn(
                    'w-[240px] justify-start text-left font-medium bg-white dark:bg-gray-800 shadow-md hover:shadow-lg transition-all rounded-xl h-12 border border-blue-200 dark:border-blue-800',
                  !selectedDate && 'text-muted-foreground'
                )}
              >
                  <CalendarIcon className="mr-2 h-6 w-6 flex-shrink-0 text-blue-600 dark:text-blue-400" />
                {selectedDate ? format(selectedDate, 'yyyy年 MM月', { locale: zhCN }) : <span>选择月份</span>}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="end">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={(date) => date && setSelectedDate(date)}
                  defaultMonth={selectedDate}
                locale={zhCN}
                initialFocus
              />
            </PopoverContent>
          </Popover>
            
            <Button 
              variant="outline" 
              size="icon" 
              onClick={() => handleMonthChange(1)}
              className="bg-gradient-to-r from-blue-100 to-indigo-100 dark:from-blue-900 dark:to-indigo-900 shadow-md hover:shadow-lg hover:scale-105 transition-all rounded-xl h-12 w-14 flex items-center justify-center border border-blue-200 dark:border-blue-800"
            >
              <ChevronRightIcon className="h-7 w-7 text-blue-600 dark:text-blue-400" />
            </Button>
          </div>
        </div>

        {/* 顶部信息卡片区域 */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          {/* 月度收入卡片 */}
          <Card className="shadow-lg hover:shadow-xl transition-all transform hover:scale-102 rounded-2xl border border-blue-100 dark:border-blue-900 overflow-hidden">
            <CardHeader className="border-b">
              <CardTitle className="flex items-center gap-2">
                <WalletIcon className="h-5 w-5 text-blue-500" />
                月度收入
              </CardTitle>
            </CardHeader>
            <CardContent className="p-4 md:p-6">
              <div>
                <Label htmlFor="income" className="text-sm font-medium">
                  {format(selectedDate, "yyyy年 MM月", { locale: zhCN })}收入
                </Label>
                <div className="relative mt-2 group">
                  <div className="absolute inset-y-0 left-3 flex items-center pointer-events-none z-10">
                    <span className="text-gray-500 dark:text-gray-400 text-lg font-medium">
                      ¥
                    </span>
                  </div>
                  <Input
                    id="income"
                    type="text"
                    value={
                      currentMonthData.income
                        ? formatNumber(currentMonthData.income)
                        : ""
                    }
                    onChange={(e) => handleIncomeChange(e.target.value)}
                    placeholder="请输入月收入"
                    className="pl-8 h-12 text-lg rounded-xl border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-200 transition-all bg-white dark:bg-gray-800 shadow-md group-hover:shadow-lg dark:shadow-gray-900/30 backdrop-blur-sm bg-opacity-80 dark:bg-opacity-80"
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 月度结余卡片 */}
          <Card
            className={cn(
              "shadow-lg transition-all transform hover:scale-102 rounded-2xl overflow-hidden",
              balance >= 0 ? "border-green-500" : "border-red-500",
              "border-2",
            )}
          >
            <CardHeader className="border-b">
              <CardTitle className="flex items-center gap-2">
                <BarChart3Icon className="h-5 w-5 text-blue-500" />
                月度结余
              </CardTitle>
            </CardHeader>
            <CardContent className="p-4 md:p-6">
              <div className="space-y-4">
                <div className="flex justify-between">
                  <span className="text-muted-foreground">收入：</span>
                  <span>￥{currentMonthData.income.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-muted-foreground">已分配：</span>
                  <span>￥{totalAllocated.toLocaleString()}</span>
                </div>
                <div className="h-px bg-border my-2" />
                <div className="flex justify-between font-semibold text-lg">
                  <span>结余：</span>
                  <motion.span
                    key={balance}
                    initial={{ scale: 1.2 }}
                    animate={{ scale: 1 }}
                    className={
                      balance >= 0 ? "text-green-600" : "text-red-600"
                    }
                  >
                    ￥{balance.toLocaleString()}
                  </motion.span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* 总结余卡片 */}
          <Card className="shadow-lg hover:shadow-xl transition-shadow rounded-2xl border border-blue-100 dark:border-blue-900 overflow-hidden">
            <CardHeader className="border-b">
              <CardTitle className="flex items-center gap-2">
                <PiggyBankIcon className="h-5 w-5 text-green-500" />
                总结余
              </CardTitle>
            </CardHeader>
            <CardContent className="p-4 md:p-6">
              <div className="text-3xl font-bold text-center text-green-600">
                <motion.div
                  key={totalBalance}
                  initial={{ scale: 1.1 }}
                  animate={{ scale: 1 }}
                >
                ￥{totalBalance.toLocaleString()}
                </motion.div>
              </div>
              <p className="text-center text-muted-foreground text-sm mt-2">
                所有月份累计结余
              </p>
            </CardContent>
          </Card>
        </div>

        {/* 收入分配区域 */}
        <div className="grid grid-cols-1 gap-3">
          <Card className="shadow-lg hover:shadow-xl transition-shadow rounded-2xl border border-blue-100 dark:border-blue-900 overflow-hidden">
            <CardHeader className="border-b">
              <div className="flex justify-between items-center">
                <CardTitle className="flex items-center gap-2">
                  <PiggyBankIcon className="h-5 w-5 text-green-500" />
                  收入分配
                </CardTitle>
                <div className="flex gap-2 items-center">
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-10 flex items-center gap-1 border-blue-200 dark:border-blue-800 bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20"
                      >
                        <LayoutTemplateIcon className="h-4 w-4 text-blue-500" />
                        使用模板
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-[420px] p-0 shadow-xl rounded-xl border border-blue-200 dark:border-blue-800">
                      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/30 dark:to-indigo-900/30 p-4 border-b border-blue-100 dark:border-blue-800">
                        <h4 className="font-medium text-blue-700 dark:text-blue-300 flex items-center gap-2">
                          <LayoutTemplateIcon className="h-4 w-4" />
                          选择预算模板
                        </h4>
                        <p className="text-xs text-blue-600/70 dark:text-blue-400/70 mt-1">
                          选择适合您当前财务状况的预算分配方案
                        </p>
                      </div>
                      <div className="max-h-[500px] overflow-y-auto p-3">
                        <div className="grid gap-3">
                          <div className="text-xs font-medium text-gray-500 uppercase tracking-wider px-1 mb-1">个人理财</div>
                          <div className="grid grid-cols-1 gap-2">
                            {['50/30/20法则', '零基预算法', '4321预算法', '70/20/10法则', '六罐法则'].map((key) => {
                              const template = TEMPLATES[key];
                              return (
                                <Card 
                                  key={key} 
                                  className="overflow-hidden transition-all hover:shadow-md cursor-pointer border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 hover:border-blue-300 dark:hover:border-blue-700"
                                  onClick={() => {
                                    applyTemplate(key);
                                    toast({
                                      title: "✅ 应用成功",
                                      description: `已应用"${template.title}"模板`,
                                      duration: 3000,
                                    });
                                  }}
                                >
                                  <CardContent className="p-3">
                                    <div className="flex justify-between items-start mb-2">
                                      <div className="font-medium text-base">{template.title}</div>
                                      <span className="text-xs px-2 py-0.5 bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 rounded-full whitespace-nowrap ml-2">
                                        {template.suitableFor.split('、')[0]}
                                      </span>
                                    </div>
                                    <p className="text-xs text-muted-foreground mb-3">{template.description}</p>
                                    <div className="space-y-1.5 mb-3">
                                      <div className="text-xs font-medium text-gray-600">适合人群:</div>
                                      <p className="text-xs text-gray-500">{template.suitableFor}</p>
                                    </div>
                                    <Button 
                                      variant="default" 
                                      size="sm" 
                                      className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 hover:from-blue-600 hover:to-indigo-600 text-white"
                                      onClick={() => {
                                        applyTemplate(key);
                                        toast({
                                          title: "✅ 应用成功",
                                          description: `已应用"${template.title}"模板`,
                                          duration: 3000,
                                        });
                                      }}
                                    >
                                      应用此模板
                                    </Button>
                                  </CardContent>
                                </Card>
                              );
                            })}
                          </div>

                          <div className="text-xs font-medium text-gray-500 uppercase tracking-wider px-1 mt-4 mb-1">创业者专用</div>
                          <div className="grid grid-cols-1 gap-3">
                            {['创业启动期', '创业成长期', '精益创业'].map((key) => {
                              const template = TEMPLATES[key];
                              return (
                                <Card 
                                  key={key} 
                                  className="overflow-hidden transition-all hover:shadow-lg cursor-pointer border border-indigo-200 dark:border-indigo-800 bg-gradient-to-r from-indigo-50 to-blue-50 dark:from-indigo-950 dark:to-blue-950"
                                  onClick={() => {
                                    applyTemplate(key);
                                    toast({
                                      title: "✅ 应用成功",
                                      description: `已应用"${template.title}"模板`,
                                      duration: 3000,
                                    });
                                  }}
                                >
                                  <CardContent className="p-4">
                                    <div className="flex justify-between items-start mb-3">
                                      <div className="font-medium text-base text-indigo-700 dark:text-indigo-300">{template.title}</div>
                                      <span className="text-xs px-2 py-0.5 bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 rounded-full whitespace-nowrap ml-2">
                                        {template.suitableFor.split('、')[0]}
                                      </span>
                                    </div>
                                    <p className="text-xs text-indigo-600/70 dark:text-indigo-400/70 mb-3">{template.description}</p>
                                    
                                    <div className="space-y-1.5 mb-3">
                                      <div className="text-xs font-medium text-indigo-600">主要分配:</div>
                                      <div className="grid grid-cols-2 gap-1">
                                        {template.allocations(1000).slice(0, 4).map(alloc => (
                                          <div key={alloc.id} className="flex items-center gap-1.5 text-[10px] text-gray-600 dark:text-gray-300">
                                            <div className="w-1.5 h-1.5 rounded-full bg-indigo-400" />
                                            <span>{alloc.purpose}: {Math.round(alloc.amount/10)}%</span>
                                          </div>
                                        ))}
                                      </div>
                                    </div>
                                    
                                    <div className="space-y-1.5 mb-4">
                                      <div className="text-xs font-medium text-indigo-600">适合人群:</div>
                                      <p className="text-xs text-indigo-600/80">{template.suitableFor}</p>
                                    </div>
                                    
                                    <Button 
                                      variant="default" 
                                      size="sm" 
                                      className="w-full bg-gradient-to-r from-indigo-500 to-purple-500 hover:from-indigo-600 hover:to-purple-600 text-white"
                                      onClick={() => {
                                        applyTemplate(key);
                                        toast({
                                          title: "✅ 应用成功",
                                          description: `已应用"${template.title}"模板`,
                                          duration: 3000,
                                        });
                                      }}
                                    >
                                      应用此模板
                                    </Button>
                                  </CardContent>
                                </Card>
                              );
                            })}
                          </div>
                        </div>
                      </div>
                    </PopoverContent>
                  </Popover>

                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant="outline"
                        size="sm"
                        className="h-10 flex items-center gap-1 border-blue-200 dark:border-blue-800 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20"
                      >
                        <TagIcon className="h-4 w-4 text-green-500" />
                        管理分类
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-[350px] p-0">{/* 分类内容... */}</PopoverContent>
                  </Popover>

                  <Button
                    variant="default"
                    size="sm"
                    onClick={addAllocation}
                    className="h-10 flex items-center gap-1 bg-gradient-to-r from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700"
                  >
                    <PlusIcon className="h-4 w-4" />
                    添加分配项
                  </Button>
                </div>
              </div>
            </CardHeader>
            <CardContent className="p-6">
              <div className="space-y-6">
                <div>
                  <Table className="allocations-table-container">
                    <TableHeader>
                      <TableRow>
                        <TableHead>用途</TableHead>
                        <TableHead className="w-[120px]">金额</TableHead>
                        <TableHead className="w-[120px]">分类</TableHead>
                        {activeTemplate && TEMPLATE_GROUPS[activeTemplate]?.length > 0 && (
                          <TableHead className="w-[120px]">所属组</TableHead>
                        )}
                        <TableHead>备注</TableHead>
                        <TableHead className="w-[70px] text-center">操作</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <AnimatePresence>
                      {currentMonthData.allocations.map((allocation) => (
                          <motion.tr
                            key={allocation.id}
                            initial={{ opacity: 0, height: 0 }}
                            animate={{ opacity: 1, height: 'auto' }}
                            exit={{ opacity: 0, height: 0 }}
                            transition={{ duration: 0.2 }}
                          >
                          <TableCell>
                            <div className="relative group">
                            <Input
                              value={allocation.purpose}
                              onChange={(e) =>
                                updateAllocation(allocation.id, 'purpose', e.target.value)
                              }
                              placeholder="输入用途"
                                className="w-full h-10 rounded-lg border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-200 transition-all bg-white dark:bg-gray-800 shadow-sm group-hover:shadow pl-2 pr-2 placeholder-gray-400"
                              />
                              {!allocation.purpose && (
                                <div className="absolute inset-y-0 left-2 flex items-center pointer-events-none text-gray-400">
                                  <TagIcon className="h-4 w-4 opacity-70" />
                                </div>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="relative group">
                              <div className="absolute inset-y-0 left-2 flex items-center pointer-events-none z-10">
                                <span className="text-gray-500 dark:text-gray-400">¥</span>
                              </div>
                            <Input
                                type="text"
                                value={allocation.amount ? formatNumber(allocation.amount) : ''}
                                onChange={(e) => {
                                  // 移除非数字字符
                                  const numericValue = e.target.value.replace(/[^\d]/g, '');
                                  updateAllocation(allocation.id, 'amount', numericValue ? Number(numericValue) : 0)
                                }}
                              placeholder="0"
                                className="pl-6 w-full h-10 rounded-lg border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-200 transition-all bg-white dark:bg-gray-800 shadow-sm group-hover:shadow text-base"
                            />
                            </div>
                          </TableCell>
                          <TableCell>
                              <div className="flex gap-1">
                                <Select
                                  value={allocation.category || ''}
                                  onValueChange={(value) => updateAllocation(allocation.id, 'category', value)}
                                >
                                  <SelectTrigger className="w-full h-9 border-gray-200">
                                    <SelectValue placeholder="选择分类" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {categories.map((category) => (
                                      <SelectItem key={category.id} value={category.id}>
                                        <div className="flex items-center gap-2">
                                          <div 
                                            className="w-3 h-3 rounded-full" 
                                            style={{ backgroundColor: category.color }}
                                          ></div>
                                          {category.name}
                                        </div>
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                            </TableCell>
                            {activeTemplate && TEMPLATE_GROUPS[activeTemplate]?.length > 0 && (
                              <TableCell>
                                <Select
                                  value={allocation.manualGroup || "auto"}
                                  onValueChange={(value) => updateAllocationGroup(allocation.id, value)}
                                >
                                  <SelectTrigger className="w-full h-9 border-gray-200">
                                    <SelectValue>
                                      {(() => {
                                        const group = getAllocationGroup(allocation);
                                        if (!group) return <span className="text-xs text-gray-400">未分组</span>;
                                        
                                        return (
                                          <div className="flex items-center gap-1.5">
                                            <div 
                                              className="w-2 h-2 rounded-full" 
                                              style={{ backgroundColor: group.color }}
                                            ></div>
                                            <span className="text-xs">{group.name}</span>
                                          </div>
                                        );
                                      })()}
                                    </SelectValue>
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="auto">
                                      <div className="flex items-center gap-2">
                                        <div className="w-3 h-3 rounded-full bg-gray-300"></div>
                                        <span className="text-gray-600">使用自动分配</span>
                                      </div>
                                    </SelectItem>
                                    {activeTemplate && TEMPLATE_GROUPS[activeTemplate].map((group) => (
                                      <SelectItem key={group.id} value={group.id}>
                                        <div className="flex items-center gap-2">
                                          <div 
                                            className="w-3 h-3 rounded-full" 
                                            style={{ backgroundColor: group.color }}
                                          ></div>
                                          {group.name}
                                        </div>
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </TableCell>
                            )}
                            <TableCell>
                              <Popover>
                                <PopoverTrigger asChild>
                                  <div className="relative w-full">
                            <Input
                              value={allocation.note || ''}
                                      readOnly
                              placeholder="添加备注"
                                      className="w-full h-9 text-base cursor-pointer hover:bg-gray-50 truncate pr-8"
                                    />
                                    <div className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400">
                                      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                      </svg>
                                    </div>
                                  </div>
                                </PopoverTrigger>
                                <PopoverContent className="w-80 p-4">
                                  <div className="space-y-2">
                                    <h4 className="font-medium text-sm text-gray-500">编辑备注</h4>
                                    <textarea
                              value={allocation.note || ''}
                              onChange={(e) => updateAllocation(allocation.id, 'note', e.target.value)}
                                      placeholder="在此输入详细备注"
                                      className="w-full min-h-[100px] p-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none resize-none"
                                      autoFocus
                                    />
                                    
                                    <div className="flex justify-end gap-2 mt-2">
                                      <Button 
                                        variant="outline" 
                                        size="sm"
                                        onClick={() => updateAllocation(allocation.id, 'note', '')}
                                        className="text-gray-500"
                                      >
                                        清空
                                      </Button>
                                      <Button 
                                        size="sm"
                                        className="bg-blue-500 hover:bg-blue-600 text-white"
                                        onClick={() => document.body.click()} // 关闭弹窗
                                      >
                                        确定
                                      </Button>
                                    </div>
                                  </div>
                                </PopoverContent>
                              </Popover>
                          </TableCell>
                          <TableCell className="text-center">
                            <Button
                              onClick={() => removeAllocation(allocation.id)}
                              variant="outline" 
                              size="icon"
                              className="h-9 w-9 rounded-full bg-red-50 hover:bg-red-100 text-red-500 border-red-200 hover:border-red-300 transition-colors shadow-sm hover:shadow"
                              title="删除此项"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="flex-shrink-0">
                                <path d="M3 6h18"></path>
                                <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                <line x1="10" y1="11" x2="10" y2="17"></line>
                                <line x1="14" y1="11" x2="14" y2="17"></line>
                              </svg>
                            </Button>
                          </TableCell>
                          </motion.tr>
                      ))}
                      </AnimatePresence>
                    </TableBody>
                  </Table>
                </div>
              </div>
            </CardContent>
            <CardFooter className="pt-0 pb-6 px-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 w-full">
                <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-100 dark:border-gray-700">
                  <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4 flex items-center gap-2">
                    <PieChart className="h-4 w-4 text-blue-500" />
                    分类占比
                  </h3>
                  {currentMonthData.allocations && currentMonthData.allocations.length > 0 ? (
                    <div className="h-[180px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <PieChart>
                          <Pie
                            data={categories.map(cat => ({
                              name: cat.name,
                              value: currentMonthData.allocations
                                .filter(a => a.category === cat.id)
                                .reduce((sum, a) => sum + (a.amount || 0), 0)
                            })).filter(item => item.value > 0)}
                            cx="50%"
                            cy="50%"
                            innerRadius={40}
                            outerRadius={60}
                            paddingAngle={2}
                            dataKey="value"
                          >
                            {categories.map((cat, index) => (
                              <Cell key={`cell-${index}`} fill={cat.color} />
                            ))}
                          </Pie>
                          <Legend />
                        </PieChart>
                      </ResponsiveContainer>
                    </div>
                  ) : (
                    <div className="h-[180px] flex items-center justify-center text-gray-400 italic">
                      暂无分配数据
                    </div>
                  )}
                </div>
                
                <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-100 dark:border-gray-700">
                  <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4 flex items-center gap-2">
                    <BarChart2 className="h-4 w-4 text-indigo-500" />
                    分类金额
                  </h3>
                  {currentMonthData.allocations && currentMonthData.allocations.length > 0 ? (
                    <div className="h-[180px]">
                      <ResponsiveContainer width="100%" height="100%">
                        <BarChart data={categories.map(cat => ({
                          name: cat.name.substring(0, 4), // 缩短名称以适应显示
                          value: currentMonthData.allocations
                            .filter(a => a.category === cat.id)
                            .reduce((sum, a) => sum + (a.amount || 0), 0),
                          color: cat.color
                        })).filter(item => item.value > 0)}>
                          <CartesianGrid strokeDasharray="3 3" vertical={false} />
                          <XAxis dataKey="name" />
                          <YAxis />
                          <Bar dataKey="value" radius={[4, 4, 0, 0]}>
                            {categories.map((cat) => (
                              <Cell key={cat.id} fill={cat.color} />
                            ))}
                          </Bar>
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  ) : (
                    <div className="h-[180px] flex items-center justify-center text-gray-400 italic">
                      暂无分配数据
                    </div>
                  )}
                </div>
                
                <div className="bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm border border-gray-100 dark:border-gray-700">
                  <h3 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4 flex items-center gap-2">
                    <ActivityIcon className="h-4 w-4 text-green-500" />
                    分配统计
                  </h3>
                  <div className="space-y-3">
                    {currentMonthData.allocations && currentMonthData.allocations.length > 0 ? (
                      <>
                        <div className="bg-gray-50 dark:bg-gray-900 p-3 rounded-lg">
                          <div className="flex justify-between items-center mb-2">
                            <span className="text-xs text-gray-500 dark:text-gray-400">已分配金额</span>
                            <span className="text-sm font-medium">
                              {formatNumber(currentMonthData.allocations.reduce((sum, a) => sum + (a.amount || 0), 0))}
                            </span>
                          </div>
                          <div className="h-2 bg-gray-200 dark:bg-gray-800 rounded-full overflow-hidden">
                            <div 
                              className="h-full bg-blue-500" 
                              style={{ 
                                width: `${Math.min(100, (currentMonthData.allocations.reduce((sum, a) => sum + (a.amount || 0), 0) / currentMonthData.income) * 100)}%`,
                              }}
                            ></div>
                          </div>
                          <div className="flex justify-between items-center mt-1 text-xs text-gray-500">
                            <span>
                              已分配 {((currentMonthData.allocations.reduce((sum, a) => sum + (a.amount || 0), 0) / currentMonthData.income) * 100).toFixed(1)}%
                            </span>
                            <span>
                              收入 {formatNumber(currentMonthData.income)}
                            </span>
                          </div>
                        </div>
                        
                        <div className="grid grid-cols-2 gap-3">
                          <div className="bg-gray-50 dark:bg-gray-900 p-3 rounded-lg">
                            <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">剩余未分配</div>
                            <div className="flex items-end gap-1">
                              <span className="text-lg font-medium">
                                {formatNumber(currentMonthData.income - currentMonthData.allocations.reduce((sum, a) => sum + (a.amount || 0), 0))}
                              </span>
                              <span className="text-xs text-gray-500 mb-0.5">
                                ({((currentMonthData.income - currentMonthData.allocations.reduce((sum, a) => sum + (a.amount || 0), 0)) / currentMonthData.income * 100).toFixed(1)}%)
                              </span>
                            </div>
                          </div>
                          
                          <div className="bg-gray-50 dark:bg-gray-900 p-3 rounded-lg">
                            <div className="text-xs text-gray-500 dark:text-gray-400 mb-1">分配项数</div>
                            <div className="flex items-end gap-1">
                              <span className="text-lg font-medium">{currentMonthData.allocations.length}</span>
                              <span className="text-xs text-gray-500 mb-0.5">项</span>
                            </div>
                          </div>
                        </div>
                      </>
                    ) : (
                      <div className="h-[180px] flex items-center justify-center text-gray-400 italic">
                        暂无分配数据
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </CardFooter>
          </Card>
        </div>
      </motion.div>

      {/* 回到顶部按钮 */}
      <motion.button
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        whileHover={{ scale: 1.1 }}
        onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
        className="fixed bottom-6 right-6 p-3 bg-gradient-to-r from-blue-500 to-indigo-500 text-white rounded-full shadow-lg hover:shadow-xl z-50 border border-blue-300"
        aria-label="回到顶部"
      >
        <ChevronUpIcon className="h-5 w-5" />
      </motion.button>
      
      {/* 设置按钮 */}
      <Dialog>
        <DialogTrigger asChild>
          <motion.button
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            whileHover={{ scale: 1.1 }}
            className="fixed bottom-20 right-6 p-3 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-full shadow-lg hover:shadow-xl z-50 border border-indigo-300"
            aria-label="设置"
          >
            <SettingsIcon className="h-5 w-5" />
          </motion.button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-md rounded-xl">
          <DialogHeader>
            <DialogTitle className="flex items-center gap-2 text-xl">
              <SettingsIcon className="h-5 w-5 text-indigo-500" />
              设置
            </DialogTitle>
            <DialogDescription>
              导出或导入您的预算数据，避免数据丢失
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-6 py-4">
            <div className="rounded-lg border border-indigo-100 dark:border-indigo-900 overflow-hidden bg-indigo-50 dark:bg-indigo-950 p-4">
              <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                <DownloadIcon className="h-4 w-4 text-indigo-500" />
                导出数据
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                将您<span className="text-indigo-600 font-medium">所有月份</span>的预算数据保存为JSON文件，以便备份或转移到其他设备
              </p>
              <Button 
                className="w-full bg-indigo-600 hover:bg-indigo-700 shadow-md hover:shadow-lg transition-all duration-300"
                onClick={() => {
                  // 准备导出数据
                  const exportData = {
                    monthlyData: monthlyData, // 导出所有月份数据
                    categories: categories,
                    exportDate: new Date().toISOString()
                  };
                  
                  // 转换为JSON字符串
                  const jsonData = JSON.stringify(exportData, null, 2);
                  
                  // 创建Blob对象
                  const blob = new Blob([jsonData], { type: 'application/json' });
                  
                  // 创建URL
                  const url = URL.createObjectURL(blob);
                  
                  // 创建下载链接
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = `完整预算数据_${format(new Date(), 'yyyy-MM-dd')}.json`;
                  document.body.appendChild(a);
                  a.click();
                  
                  // 清理
                  URL.revokeObjectURL(url);
                  document.body.removeChild(a);
                  
                  // 显示成功提示
                  toast({
                    title: "✅ 导出成功",
                    description: `已导出${Object.keys(monthlyData).length}个月的预算数据`,
                    duration: 3000,
                  });
                }}
              >
                导出所有数据（{Object.keys(monthlyData).length}个月）
              </Button>
            </div>
            
            <div className="rounded-lg border border-indigo-100 dark:border-indigo-900 overflow-hidden bg-indigo-50 dark:bg-indigo-950 p-4">
              <h3 className="text-lg font-medium mb-2 flex items-center gap-2">
                <UploadIcon className="h-4 w-4 text-indigo-500" />
                导入数据
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                从之前导出的JSON文件中恢复预算数据
              </p>
              
              <div className="space-y-4">
                <div className="border-2 border-dashed border-indigo-200 dark:border-indigo-800 rounded-lg p-6 text-center bg-indigo-50/50 dark:bg-indigo-900/20">
                  <input
                    type="file"
                    id="importFile"
                    accept=".json"
                    className="hidden"
                    onChange={(e) => {
                      // 检查是否有文件
                      if (!e.target.files || e.target.files.length === 0) {
                        return;
                      }
                      
                      const file = e.target.files[0];
                      const reader = new FileReader();
                      
                      reader.onload = (event) => {
                        try {
                          // 解析JSON
                          const data = JSON.parse(event.target?.result as string);
                          
                          // 基本验证
                          if (!data.monthlyData || !data.categories) {
                            throw new Error('无效的数据格式');
                          }
                          
                          // 确认导入
                          if (confirm(`此操作将导入${Object.keys(data.monthlyData).length}个月的数据并覆盖当前数据，确定要导入吗？`)) {
                            // 更新状态和本地存储
                            setMonthlyData(data.monthlyData);
                            setCategories(data.categories);
                            localStorage.setItem('monthlyData', JSON.stringify(data.monthlyData));
                            localStorage.setItem('userCategories', JSON.stringify(data.categories));
                            
                            // 显示成功提示
                            toast({
                              title: "✅ 导入成功",
                              description: `已导入${Object.keys(data.monthlyData).length}个月的预算数据`,
                              duration: 3000,
                            });
                          }
                        } catch (error) {
                          // 显示错误提示
                          toast({
                            title: "❌ 导入失败",
                            description: "数据格式无效或已损坏",
                            duration: 5000,
                          });
                          
                          console.error('Import error:', error);
                        }
                        
                        // 重置文件输入
                        e.target.value = '';
                      };
                      
                      reader.readAsText(file);
                    }}
                  />
                  <label 
                    htmlFor="importFile" 
                    className="cursor-pointer flex flex-col items-center justify-center gap-3 py-4"
                  >
                    <div className="h-16 w-16 rounded-full bg-gradient-to-br from-indigo-400 to-purple-500 flex items-center justify-center text-white shadow-lg">
                      <UploadIcon className="h-7 w-7" />
                    </div>
                    <span className="text-base font-medium text-indigo-600 dark:text-indigo-300">点击选择JSON文件</span>
                    <span className="text-xs text-gray-500">或拖放文件到此处</span>
                  </label>
                </div>
                
                <div className="bg-amber-50 dark:bg-amber-950 border border-amber-200 dark:border-amber-800 rounded-lg p-3 flex items-start gap-2">
                  <AlertTriangleIcon className="h-5 w-5 text-amber-500 flex-shrink-0 mt-0.5" />
                  <p className="text-xs text-amber-800 dark:text-amber-200">
                    导入将覆盖当前所有数据。请确保导入文件是之前通过本应用导出的有效备份。
                  </p>
                </div>
              </div>
            </div>
          </div>
          <DialogFooter className="border-t pt-4">
            <Button variant="outline" className="w-full">关闭</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* 添加Toast容器 */}
      <ToastContainer />
    </div>
  );
}

export default App;
